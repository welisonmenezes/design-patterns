@page "/command"

<h1>Command</h1>

<div>
    <button class="btn btn-primary" @onclick="ClickEventA">Concrete A</button>
    <button class="btn btn-primary" @onclick="ClickEventB">Concrete B</button>
    <button class="btn btn-primary" @onclick="ClickEventComposite">Concrete Composite</button>
</div>
<br><br>
<code>
    @theReturn
</code>

@using Patterns.Command

@code {

    IReceiver receiverA;
    IReceiver receiverB;
    ICommand concreteCommand;
    CompositeCommand compositeCommands;
    Invoker caller;

    string theReturn;

    protected override void OnInitialized()
    {
        receiverA = new ReceiverA();
        receiverB = new ReceiverB();
        concreteCommand = new ConcreteCommand();
        compositeCommands = new CompositeCommand();
        caller = new Invoker();
    }

    public void ClickEventA()
    {
        concreteCommand.setReceiver(receiverA);
        caller.setCommand(concreteCommand);
        theReturn = caller.Event();
    }

    public void ClickEventB()
    {
        concreteCommand.setReceiver(receiverB);
        caller.setCommand(concreteCommand);
        theReturn = caller.Event();
    }

    public void ClickEventComposite()
    {
        compositeCommands.clearReceivers();
        compositeCommands.setReceiver(receiverA);
        compositeCommands.setReceiver(receiverB);
        caller.setCommand(compositeCommands);
        theReturn = caller.Event();
    }
}
